let b = {};
let c;

b.b = 1;
c = b;
c.b = 2;

console.log("b.b =", b.b); //2
console.log("c.b =", c.b); //2

//Explanation
/*
Почитать на тему: https://learn.javascript.ru/object-copy

При копировании переменной объекта копируется ссылка,
но сам объект не дублируется, как это бы происходило с "примитивами"
(простыми типами переменных)

Выводы с сайта:

Объекты присваиваются и копируются по ссылке.
Другими словами, переменная хранит не «значение объекта»,
а «ссылку» (адрес в памяти) на это значение. Таким образом,
копирование такой переменной или передача её в качестве
аргумента функции копирует эту ссылку, а не сам объект.
Все операции с использованием скопированных ссылок
(например, добавление/удаление свойств) выполняются с одним и тем же объектом.
Чтобы создать «реальную копию» (клон), мы можем использовать Object.assign
для так называемой «поверхностной копии» (вложенные объекты копируются по ссылке)
или функцию «глубокого клонирования», такую как _.cloneDeep(obj).
*/
